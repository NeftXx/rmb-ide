
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.neftxx.olc;

import com.neftxx.error.ErrorHandler;
import com.neftxx.util.NodeInfo;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java.util.ArrayList;
import org.apache.commons.io.FilenameUtils;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\013\000\002\002\004\000\002\002\011\000\002\003" +
    "\023\000\002\003\022\000\002\004\005\000\002\004\005" +
    "\000\002\004\003\000\002\004\003\000\002\005\015\000" +
    "\002\006\013\000\002\006\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\066\000\004\015\004\001\002\000\004\004\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\017\010\001\002\000\004\015\011\001\002\000" +
    "\004\005\012\001\002\000\004\017\016\001\002\000\004" +
    "\016\014\001\002\000\004\016\015\001\002\000\004\002" +
    "\000\001\002\000\004\014\017\001\002\000\004\020\020" +
    "\001\002\000\004\006\021\001\002\000\004\017\022\001" +
    "\002\000\004\014\023\001\002\000\004\020\024\001\002" +
    "\000\004\007\025\001\002\000\004\017\026\001\002\000" +
    "\004\014\027\001\002\000\004\020\030\001\002\000\004" +
    "\010\031\001\002\000\004\017\032\001\002\000\004\015" +
    "\033\001\002\000\010\011\034\013\040\016\041\001\002" +
    "\000\004\017\057\001\002\000\006\016\ufffb\020\ufffb\001" +
    "\002\000\006\016\ufffa\020\ufffa\001\002\000\006\016\056" +
    "\020\052\001\002\000\004\017\042\001\002\000\004\016" +
    "\ufffe\001\002\000\004\015\043\001\002\000\004\006\044" +
    "\001\002\000\004\017\045\001\002\000\004\014\046\001" +
    "\002\000\006\016\050\020\047\001\002\000\006\011\034" +
    "\013\040\001\002\000\006\016\ufff7\020\ufff7\001\002\000" +
    "\006\016\053\020\052\001\002\000\006\011\034\013\040" +
    "\001\002\000\006\016\ufff8\020\ufff8\001\002\000\006\016" +
    "\ufffd\020\ufffd\001\002\000\006\016\ufffc\020\ufffc\001\002" +
    "\000\004\016\uffff\001\002\000\004\015\060\001\002\000" +
    "\004\006\061\001\002\000\004\017\062\001\002\000\004" +
    "\014\063\001\002\000\004\020\064\001\002\000\004\012" +
    "\065\001\002\000\004\017\066\001\002\000\004\014\067" +
    "\001\002\000\004\016\070\001\002\000\006\016\ufff9\020" +
    "\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\066\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\004\036\005\034\006\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\004\050\005\034\006\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\053\006\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /*
     * nodo resultante
     */
    public Olc olc;

    /*
     * Nombre del archivo que se esta analizando
     */
    public String filename;

    /**
     * Constructor del analizador sintactico
     *
     * @param scann  Analizador lexico
     * @param sf     Fabrica de simbolos
     */
    public Parser(Lexer scann, ComplexSymbolFactory sf) {
        super(scann, sf);
        filename = scann.filename;
        olc = null;
    }

    /**
     *
     * Método al que se llama automaticamente ante algun error sintactico.
     *
     * @param s simbolo que provoco el error
     */
    @Override
    public void syntax_error(java_cup.runtime.Symbol s) {
        ComplexSymbol cs = (ComplexSymbol) s;
        error("No se esperaba el siguiente simbolo: " + cs.getName(), cs.getLeft().getLine(), cs.getRight().getColumn());
    }

    /**
     *
     * Método al que se llama en el momento en que ya no es posible una
     * recuperacion de errores.

     * @param s simbolo que provoco el error
     * @throws Exception
     */
    @Override
    public void unrecovered_syntax_error(java_cup.runtime.Symbol s) throws Exception {
        ComplexSymbol cs = (ComplexSymbol) s;
        error("Error irrecuperable provocado simbolo: " + cs.getName(), cs.getLeft().getLine(), cs.getRight().getColumn());
    }

    /**
     * Guarda los errores en el manejador
     *
     * @param message mensaje de por que se provoco el error
     * @param line linea donde se encuentra el error
     * @param column columna donde se encuentra el error
     */
    private void error(String message, int line, int column) {
        ErrorHandler.addSyntacticError(message, line, column, FilenameUtils.getName(filename));
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Olc EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Olc ::= LLAVE_IZQ PROYECTO DOS_PUNTOS LLAVE_IZQ Project LLAVE_DER LLAVE_DER 
            {
              Object RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location Projectxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location Projectxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		OlcProject Project = (OlcProject)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        NodeInfo info = new NodeInfo(axleft.getLine(), axright.getColumn(), filename);
        olc = new Olc(info, Project);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Olc",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Project ::= RUTA DOS_PUNTOS STRING COMA NOMBRE DOS_PUNTOS STRING COMA CORRER DOS_PUNTOS STRING COMA CONFIGURACION DOS_PUNTOS LLAVE_IZQ Block LLAVE_DER 
            {
              OlcProject RESULT =null;
		Location rutaxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)).xleft;
		Location rutaxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)).xright;
		String ruta = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-14)).value;
		Location nombrexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).xleft;
		Location nombrexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).xright;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		Location correrxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location correrxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		String correr = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location blockxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location blockxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ArrayList<OlcNode> block = (ArrayList<OlcNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            NodeInfo info = new NodeInfo(rutaxleft.getLine(), rutaxright.getColumn(), filename);
            RESULT = new OlcProject(info, ruta, nombre, correr, block);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Project",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-16)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Project ::= RUTA DOS_PUNTOS STRING COMA NOMBRE DOS_PUNTOS STRING COMA CORRER DOS_PUNTOS STRING COMA CONFIGURACION DOS_PUNTOS LLAVE_IZQ LLAVE_DER 
            {
              OlcProject RESULT =null;
		Location rutaxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).xleft;
		Location rutaxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).xright;
		String ruta = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-13)).value;
		Location nombrexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).xleft;
		Location nombrexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).xright;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		Location correrxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location correrxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		String correr = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		
            NodeInfo info = new NodeInfo(rutaxleft.getLine(), rutaxright.getColumn(), filename);
            RESULT = new OlcProject(info, ruta, nombre, correr, new ArrayList<>());
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Project",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Block ::= Block COMA File 
            {
              ArrayList<OlcNode> RESULT =null;
		Location listxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location listxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ArrayList<OlcNode> list = (ArrayList<OlcNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location filexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location filexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		OlcFile file = (OlcFile)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        list.add(file);
        RESULT = list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Block",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Block ::= Block COMA Folder 
            {
              ArrayList<OlcNode> RESULT =null;
		Location listxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location listxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ArrayList<OlcNode> list = (ArrayList<OlcNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location folderxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location folderxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		OlcFolder folder = (OlcFolder)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        list.add(folder);
        RESULT = list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Block",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Block ::= File 
            {
              ArrayList<OlcNode> RESULT =null;
		Location filexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location filexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		OlcFile file = (OlcFile)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        ArrayList<OlcNode> list = new ArrayList<>();
        list.add(file);
        RESULT = list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Block",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Block ::= Folder 
            {
              ArrayList<OlcNode> RESULT =null;
		Location folderxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location folderxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		OlcFolder folder = (OlcFolder)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        ArrayList<OlcNode> list = new ArrayList<>();
        list.add(folder);
        RESULT = list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Block",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // File ::= ARCHIVO DOS_PUNTOS LLAVE_IZQ NOMBRE DOS_PUNTOS STRING COMA FECHA_MOD DOS_PUNTOS STRING LLAVE_DER 
            {
              OlcFile RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).xright;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		Location nombrexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location nombrexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location fechaxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location fechaxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String fecha = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            NodeInfo info = new NodeInfo(axleft.getLine(), axright.getColumn(), filename);
            RESULT = new OlcFile(info, nombre, fecha);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("File",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Folder ::= CARPETA DOS_PUNTOS LLAVE_IZQ NOMBRE DOS_PUNTOS STRING COMA Block LLAVE_DER 
            {
              OlcFolder RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).xright;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		Location nombrexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location nombrexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location blockxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location blockxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ArrayList<OlcNode> block = (ArrayList<OlcNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            NodeInfo info = new NodeInfo(axleft.getLine(), axright.getColumn(), filename);
            RESULT = new OlcFolder(info, nombre, block);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Folder",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Folder ::= CARPETA DOS_PUNTOS LLAVE_IZQ NOMBRE DOS_PUNTOS STRING LLAVE_DER 
            {
              OlcFolder RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location nombrexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location nombrexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            NodeInfo info = new NodeInfo(axleft.getLine(), axright.getColumn(), filename);
            RESULT = new OlcFolder(info, nombre, new ArrayList<>());
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Folder",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
